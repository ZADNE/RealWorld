#version 460
#include <RealWorld/constants/tile.glsl>
#include <RealWorld/reserved_units/images.glsl>
#include <RealWorld/world/shaders/ActiveChunksSSIB.glsl>
#include <RealWorld/world/shaders/tileLoadStore.glsl>
#include <RealWorld/world/shaders/WorldDynamicsUIB.glsl>
#include <RealWorld/world/shaders/TilePropertiesUIB.glsl>

const int TRANSFORM_GROUP_SIZE = 4;

const ivec2 INVOC_DISPLACEMENT = CHUNK_SIZE / TRANSFORM_GROUP_SIZE;

layout( local_size_x = TRANSFORM_GROUP_SIZE,
        local_size_y = TRANSFORM_GROUP_SIZE,
        local_size_z = 1
) in;

uint invocHash(){
    uint globalIndex = gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;
    return globalIndex ^ timeHash;
}
uint randomState = invocHash();

//Xorshift algorithm by George Marsaglia
uint random(){
    randomState ^= randomState << 13;
    randomState ^= randomState >> 17;
    randomState ^= randomState << 5;
    return randomState;
}

uvec2 random2(){
    return uvec2(random(), random());
}

const ivec2 NEARBY_OFFSETS[] = {
                {-1, +2},   {+0, +2},   {+1, +2},
    {-2, +1},   {-1, +1},   {+0, +1},   {+1, +1},   {+2, +1},
    {-2, +0},   {-1, +0},               {+1, +0},   {+2, +0},
    {-2, -1},   {-1, -1},   {+0, -1},   {+1, -1},   {+2, -1},
                {-1, -2},   {+0, -2},   {+1, -2}
};

bool layerTransition(inout uvec4 tile, const uint layer, const uint otherLayer, uvec4 rule, uvec2 nearbyProperties, uvec2 edgeTile){
    uint props = nearbyProperties[layer] | mix(0, nearbyProperties[otherLayer], bool(rule.z & MIX_PROPSb));
    uint requiredNearby = uint((props & rule.x) == rule.x);
    uint forbiddenNotNearby = uint((props & rule.y) == 0);
    uint edgeRequiredToSpread = rule.z & EDGEb;
    uint transform = requiredNearby & forbiddenNotNearby & (~edgeRequiredToSpread | edgeTile[layer]);
    tile[layer * 2] = mix(tile[layer * 2], rule.w, bool(transform));
    return bool(transform);
}

void main(){
    random();
    ivec2 centerTi = offsets[gl_WorkGroupID.x] + ivec2(gl_LocalInvocationID.xy) * INVOC_DISPLACEMENT
                    + (ivec2(random(), random()) & (INVOC_DISPLACEMENT - 1));
    
    uvec4 tile = tileLoad(centerTi);
    uvec2 edgeTile = uvec2(0);
    uvec2 nearbyProperties = uvec2(0);
    for(int i = 0; i < NEARBY_OFFSETS.length(); ++i){//Check all neighbors
        uvec4 neighbor = tileLoad(centerTi + NEARBY_OFFSETS[i]);
        //Analyze the neighbor
        nearbyProperties |= uvec2(u_blockProperties[neighbor.BL_T].x, u_wallProperties[neighbor.WL_T].x);
        edgeTile |= uvec2(isFluidTile(neighbor.TL_T));
    }

    //Transform block of the tile
    uvec2 blockRuleIndices = u_blockProperties[tile.BL_T].yz;
    for (uint i = blockRuleIndices.x; i <= blockRuleIndices.y;++i) {
        if (layerTransition(tile, 0, 1, u_blockTransformationRules[i], nearbyProperties, edgeTile)){
            break;
        }
    }
    //Transform wall of the tile
    uvec2 wallRuleIndices = u_wallProperties[tile.WL_T].yz;
    for (uint i = wallRuleIndices.x; i <= wallRuleIndices.y;++i) {
        if (layerTransition(tile, 1, 0, u_wallTransformationRules[i], nearbyProperties, edgeTile)){
            break;
        }
    }
    
    //Select variant
    uvec2 currentlyInner = uvec2(lessThan(tile.TILE_VAR, uvec2(12)));
    uvec2 isSolid = uvec2(isSolidTile(tile.TILE_TYPE));
    uvec2 switchToInner = (~edgeTile & ~currentlyInner) & isSolid;
    uvec2 switchToOuter = (edgeTile & currentlyInner) & isSolid;
    tile.TILE_VAR =
        mix(tile.TILE_VAR, uvec2(0), bvec2(switchToInner | switchToOuter))
        + mix(uvec2(0), random2() % 12, bvec2(switchToInner))
        + mix(uvec2(0), random2() % 4 + 12, bvec2(switchToOuter));
    
    //Store the transformed tile
    tileStore(centerTi, tile);
}
