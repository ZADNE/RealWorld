/*!
 *  @author     Dubsky Tomas
 */
#version 460
#include <RealWorld/constants/tile.glsl>
#include <RealWorld/constants/world.glsl>
#include <RealWorld/world/shaders/random.glsl>
#include <RealWorld/world/shaders/simulationPll.glsl>
#include <RealWorld/world/shaders/tileLoadStore.glsl>
#include <RealWorld/world/shaders/ActiveChunksSB.glsl>
#include <RealWorld/world/shaders/TilePropertiesUB.glsl>
#include <RealWorld/world/shaders/WorldDynamicsPC.glsl>

#define TL_T xz
#define BL_T x
#define WL_T z
#define TL_V yw

const int k_transformGroupSize = 4;

const ivec2 k_invocDisplacement = iChunkTi / k_transformGroupSize;

layout (local_size_x = k_transformGroupSize,
        local_size_y = k_transformGroupSize,
        local_size_z = 1
) in;

uint invocHash(){
    uint globalIndex = gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;
    return globalIndex ^ p_timeHash;
}

const ivec2 k_nearbyOffsets[] = {
                {-1, +2},   {+0, +2},   {+1, +2},
    {-2, +1},   {-1, +1},   {+0, +1},   {+1, +1},   {+2, +1},
    {-2, +0},   {-1, +0},               {+1, +0},   {+2, +0},
    {-2, -1},   {-1, -1},   {+0, -1},   {+1, -1},   {+2, -1},
                {-1, -2},   {+0, -2},   {+1, -2}
};

bool layerTransition(inout uvec4 tile, const uint layer, const uint otherLayer, uvec4 rule, uvec2 nearbyProperties, uvec2 edgeTile){
    uint props = nearbyProperties[layer] | mix(0, nearbyProperties[otherLayer], bool(rule.z & MIX_PROPSb));
    bool requiredNearby = (props & rule.x) == rule.x;
    bool forbiddenNotNearby = (props & rule.y) == 0;
    bool edgeRequiredToSpread = bool(rule.z & EDGEb);
    bool toOtherLayer = bool(rule.z & TO_OTHERb);
    bool mustHaveLowVar = bool(rule.z & LOW_VARb);
    uint targetLayer = toOtherLayer ? otherLayer : layer;
    uint prev = tile[targetLayer * 2];
    bool transform = 
        requiredNearby && forbiddenNotNearby &&
        bool(!edgeRequiredToSpread || bool(edgeTile[layer])) &&
        bool(!toOtherLayer || prev == k_air[targetLayer]) &&
        bool(!mustHaveLowVar || tile[layer * 2 + 1] < 3);
    tile[targetLayer * 2] = mix(prev, rule.w, transform);
    return transform;
}

void main(){
    g_randomState = invocHash();
    random();
    const ivec2 centerAt = tiToAt(
        b_acChunks.offsets[gl_WorkGroupID.x]
            + ivec2(gl_LocalInvocationID.xy) * k_invocDisplacement
            + (ivec2(random(), random()) & (k_invocDisplacement - 1)),
        p_worldTexMaskTi);

    uvec4 tile = loadTile(centerAt);
    uvec2 edgeTile = uvec2(0);
    uvec2 nearbyProperties = uvec2(0);
    for(int i = 0; i < k_nearbyOffsets.length(); ++i){ // Check all neighbors
        ivec2 nPosAt = tiToAt(centerAt + k_nearbyOffsets[i], p_worldTexMaskTi);
        uvec4 neighbor = loadTile(nPosAt);
        // Analyze the neighbor
        nearbyProperties |= uvec2(u_blockProperties[neighbor.BL_T].x, u_wallProperties[neighbor.WL_T].x);
        edgeTile |= uvec2(isNonsolidTile(neighbor.TL_T));
    }

    // Transform block of the tile
    uvec2 blockRuleIndices = u_blockProperties[tile.BL_T].yz;
    for (uint i = blockRuleIndices.x; i <= blockRuleIndices.y;++i) {
        if (layerTransition(tile, 0, 1, u_blockTransformationRules[i], nearbyProperties, edgeTile)){
            break;
        }
    }

    // Transform wall of the tile
    uvec2 wallRuleIndices = u_wallProperties[tile.WL_T].yz;
    for (uint i = wallRuleIndices.x; i <= wallRuleIndices.y;++i) {
        if (layerTransition(tile, 1, 0, u_wallTransformationRules[i], nearbyProperties, edgeTile)){
            break;
        }
    }

    // Select variant
    uvec2 currentlyInner = uvec2(lessThan(tile.TL_V, uvec2(12)));
    uvec2 isSolid = uvec2(isSolidTile(tile.TL_T));
    uvec2 switchToInner = (~edgeTile & ~currentlyInner) & isSolid;
    uvec2 switchToOuter = (edgeTile & currentlyInner) & isSolid;
    tile.TL_V =
        mix(tile.TL_V, uvec2(0), bvec2(switchToInner | switchToOuter))
        + mix(uvec2(0), random2() % 12, bvec2(switchToInner))
        + mix(uvec2(0), random2() % 4 + 12, bvec2(switchToOuter));

    // Store the transformed tile
    storeTile(centerAt, tile);
}
