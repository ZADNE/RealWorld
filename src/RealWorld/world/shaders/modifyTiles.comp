/*!
 *  @author     Dubsky Tomas
 */
#version 460
#include <RealWorld/constants/tile.glsl>
#include <RealWorld/constants/world.glsl>
#include <RealWorld/world/shaders/random.glsl>
#include <RealWorld/world/shaders/simulationPll.glsl>
#include <RealWorld/world/shaders/tileLoadStore.glsl>
#include <RealWorld/world/shaders/WorldDynamicsPC.glsl>

layout (local_size_x = 16,
        local_size_y = 16,
        local_size_z = 1
) in;

const uint k_square = 0;
const uint k_disk = 1;

void main(){
    ivec2 offset = ivec2(gl_LocalInvocationID.xy) - ivec2(gl_WorkGroupSize.xy) / 2;
    // Construct the shape
    switch (p_modifyShape){
        case k_square:
        if (abs(offset.x) > p_modifyRadius || abs(offset.y) > p_modifyRadius){
            return;// Outside of the shape
        }
        break;
        case k_disk:
        if (dot(offset, offset) > p_modifyRadius * p_modifyRadius){
            return;// Outside of the shape
        }
        break;
    }

    // Load the tile
    ivec2 posAt = tiToAt(p_globalPosTi + offset, p_worldTexMaskTi);
    uvec2 layer = loadLayer(posAt, p_modifyLayer);
    uint  blockType = loadBlock(posAt).L_T;

    // Modify the tile
    bool airInAboveLayer = p_modifyLayer == k_blockLayer ? true : isNonsolidBlock(blockType);
    if ((p_modifySetValue.x == k_removeBl) == (layer.L_T == k_airBl) == airInAboveLayer){
        return;
    }
    g_randomState = (posAt.x * posAt.y) ^ p_timeHash;
    layer = p_modifySetValue.y <= 255 ? p_modifySetValue : uvec2(p_modifySetValue.x, random() % 12);

    // Store the modified tile
    storeLayer(posAt, p_modifyLayer, layer);
}
