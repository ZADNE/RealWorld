/*!
 *  @author     Dubsky Tomas
 */
#version 460
#include <RealWorld/constants/tile.glsl>
#include <RealWorld/constants/generation.glsl>
#include <RealWorld/generation/shaders/GenerationPC.glsl>
#include <RealWorld/generation/shaders/generationPll.glsl>

layout (local_size_x = k_genGroupSize,
        local_size_y = k_genGroupSize,
        local_size_z = 1
) in;

layout (set = 0, binding = k_tilesImageBinding, rg8ui)
    uniform restrict uimage2DArray          u_layerImage;
layout (set = 0, binding = k_materialImageBinding, r8ui)
    uniform restrict readonly uimage2DArray u_materialImage;

const ivec2 k_neighborhood[] = {
    {-1, +1},     {+0, +1},     {+1, +1},
    {-1, +0},                   {+1, +0},
    {-1, -1},     {+0, -1},     {+1, -1}
};

void main() {
    // Load previous value of the block
    const uint loadLayer = blockImgLoadLayer();
    const ivec2 pTi = ivec2(gl_GlobalInvocationID.xy);
    uvec2 block = imageLoad(u_layerImage, ivec3(pTi, loadLayer)).xy;

    // Examine neighbors
    uint neighborsN = 0u;
    for (int i = 0; i < k_neighborhood.length(); i++){
        uint neighbor = imageLoad(u_layerImage, ivec3(pTi + k_neighborhood[i], loadLayer)).L_T;
        neighborsN += uint(!isAirBlock(neighbor));
    }

    // Determine new block
    if (block.L_T == k_airBl){
        if (neighborsN > p_edgeConsolidationPromote){
            // Surrounded air -> promote to material
            block.L_T = imageLoad(u_materialImage, ivec3(pTi, gl_WorkGroupID.z)).r;
        }
    } else {
        if (neighborsN < p_edgeConsolidationReduce){
            // Lonely solid -> reduce to air
            block.L_T = k_airBl;
        }
    }

    // Store the new block
    imageStore(u_layerImage, ivec3(pTi, blockImgStoreLayer()), block.xyxy);
}
