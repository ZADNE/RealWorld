/*!
 *  @author     Dubsky Tomas
 */
#version 460
#include <RealWorld/constants/tile.glsl>
#include <RealWorld/generation/external_shaders/snoise.glsl>
#include <RealWorld/simulation/tiles/shaders/random.glsl>
#include <RealWorld/simulation/vegetation/shaders/normAngles.glsl>
#include <RealWorld/generation/shaders/generationPll.glsl>
#include <RealWorld/simulation/vegetation/shaders/BranchSB.glsl>
#include <RealWorld/generation/shaders/VegTemplatesUB.glsl>
#define VegPrepSB_ACCESS readonly
#include <RealWorld/generation/shaders/VegPrepSB.glsl>

layout (local_size_x = 2,
        local_size_y = 32,
        local_size_z = 1
) in;

shared VegInstance       s_inst;
shared VegRasterTemplate s_tmplt;

void main(){
    uint id = gl_WorkGroupID.x;
    uint vegIndex = b_vegPrep.vegIndex[id];
    if (gl_LocalInvocationIndex == 0){
        s_inst = b_vegPrep.vegInstances[vegIndex];
        s_tmplt = u_vegTmplts.rasterTmplts[s_inst.templateIndex];
    }
    barrier();

    uint indexWithinVeg = id - b_vegPrep.prepIndexOfFirstBranch[vegIndex];
    uint i = b_vegPrep.branchOfChunk[s_inst.chunkIndex] +
             b_vegPrep.vegOffsetWithinChunk[vegIndex] + 
             indexWithinVeg;
    g_randomState = s_inst.randomSeed ^ (indexWithinVeg * 2713) ^ (gl_LocalInvocationIndex * 7823);
    
    vec2 absPosTi    = b_vegPrep.absPosTi[id];
    float absAngNorm = b_vegPrep.absAngNorm[id];
    uint packed      = b_vegPrep.parentOffset15wallType31[id];
    uint wallType    = unpackBranchParentOffsetWallType(packed).y;
    float radiusTi   = b_vegPrep.radiusTi[id];
    float lengthTi   = b_vegPrep.lengthTi[id];

    // Calculate raster variant
    uint var = 0;
    vec2 threadTi = mix(
        absPosTi,
        absPosTi + toCartesian(lengthTi, absAngNorm),
        float(gl_LocalInvocationID.y) / float(gl_WorkGroupSize.y - 1)
    );
    switch (wallType){
    case k_oakWoodWl:
    case k_acaciaWoodWl:
    case k_coniferousWoodWl:{
        float n = snoise(vec2(gl_LocalInvocationID.xy) * s_tmplt.noiseScale, float(indexWithinVeg)) * s_tmplt.maxLeafStrength;
        float radF = (1.0 - radiusTi) * s_tmplt.branchRadiusFactor;
        radF = radF * radF * radF;
        float d = min(distance(threadTi, s_inst.rootPosTi) * 0.5, 56);
        var = uint(clamp(n + radF, 0.0, s_tmplt.maxLeafStrength)) | (uint(d) & 56);
        break;}
    case k_palmWoodWl:{
        float n = snoise(vec2(gl_LocalInvocationID.xy) * s_tmplt.noiseScale, float(indexWithinVeg)) * 2.0;
        if (radiusTi == 0.5){ // If palm leaf
            float l = s_tmplt.maxLeafStrength - 0.25 * abs(float(gl_LocalInvocationID.y) - lengthTi * 0.5);
            var = uint(clamp(l, 0.0, s_tmplt.maxLeafStrength)) | (uint(48) & 56);
        } else { // Else palm trunk
            float d = distance(absPosTi, threadTi);
            var = uint((n + d) * 13.0) & 56;
        }
        break;}
    case k_tallGrassWl:
    case k_coldTallGrassWl:
    case k_mudTallGrassWl:
    case k_dryTallGrassWl:
        var = random() & 63;
        break;
    case k_withyWl:{
        int ivar = int(gl_WorkGroupSize.y - gl_LocalInvocationID.y - 1) * int(64 / gl_WorkGroupSize.y) + 
                   int(random() & 16) - 8;
        var = clamp(ivar, 0, 63);
        break;}
    case k_cactusWl:{
        float n = snoise(threadTi * s_tmplt.noiseScale, 11.0) * 0.5 + 0.5;
        var = uint(n * 15.0) | (uint(randomFloat() < 0.125) * 32);
        break;}
    }
    storeBranchTexel(
        i, ivec2(gl_LocalInvocationID.xy), uvec2(k_woodBasicStateNatural, var)
    );

    // Copy vector parameters to their final location
    if (gl_LocalInvocationIndex == 0){
        b_branch.absPosTi[0][i] = absPosTi;
        b_branch.absAngNorm[0][i] = absAngNorm;
        b_branch.parentOffset15wallType31[i] = packed;
        b_branch.relRestAngNorm[i] = b_vegPrep.relRestAngNorm[id];
        b_branch.angVel[i] = 0.0;
        b_branch.radiusTi[i] = radiusTi;
        b_branch.lengthTi[i] = lengthTi;
        b_branch.densityStiffness[i] = b_vegPrep.densityStiffness[id];
    }
}
