/*!
 *  @author     Dubsky Tomas
 */
#version 460
#include <RealWorld/constants/tile.glsl>
#include <RealWorld/generation/external_shaders/snoise.glsl>
#include <RealWorld/world/shaders/random.glsl>
#include <RealWorld/generation/shaders/generationPll.glsl>
#include <RealWorld/vegetation/shaders/BranchSB.glsl>
#define VegPrepSB_ACCESS readonly
#include <RealWorld/generation/shaders/VegPrepSB.glsl>

layout (local_size_x = 2,
        local_size_y = 32,
        local_size_z = 1
) in;

shared VegInstance s_inst;

void main(){
    uint id = gl_WorkGroupID.x;
    uint vegIndex = b_vegPrep.vegIndex[id];
    if (gl_LocalInvocationIndex == 0){
        s_inst = b_vegPrep.vegInstances[vegIndex];
    }
    barrier();

    uint indexWithinVeg = id - b_vegPrep.prepIndexOfFirstBranch[vegIndex];
    uint i = b_vegPrep.branchOfChunk[s_inst.chunkIndex] +
             b_vegPrep.vegOffsetWithinChunk[vegIndex] + 
             indexWithinVeg;
    g_randomState = s_inst.randomSeed ^ (indexWithinVeg * 2713);

    uint packed    = b_vegPrep.parentOffset15wallType31[id];
    uint wallType  = unpackBranchParentOffsetWallType(packed).y;
    float radiusTi = b_vegPrep.radiusTi[id];
    vec2 absPosTi  = b_vegPrep.absPosTi[id];

    // Calculate raster variant
    uint var = 0;
    switch (wallType){
    case k_oakWoodWl:
        float n = snoise(vec2(gl_LocalInvocationID.xy) * 0.0625, float(indexWithinVeg)) * 7.0;
        float radF = (1.0 - radiusTi) * 3.0;
        radF = radF * radF * radF;
        float d = distance(absPosTi, s_inst.rootPosTi);
        var = uint(clamp(n + radF, 0.0, 7.0)) | (uint(d) & 248);
        break;
    case k_tallGrassWl:
    case k_wheatWl:
        var = random() & 120 + uint(gl_LocalInvocationID.y >= 24) * 128;
        break;
    }
    storeBranchTexel(i, ivec2(gl_LocalInvocationID.xy), var);

    // Copy vector parameters to their final location
    if (gl_LocalInvocationIndex == 0){
        b_branch.absPosTi[0][i] = absPosTi;
        b_branch.absAngNorm[0][i] = b_vegPrep.absAngNorm[id];
        b_branch.parentOffset15wallType31[i] = packed;
        b_branch.relRestAngNorm[i] = b_vegPrep.relRestAngNorm[id];
        b_branch.angVel[i] = 0.0;
        b_branch.radiusTi[i] = radiusTi;
        b_branch.lengthTi[i] = b_vegPrep.lengthTi[id];
        b_branch.densityStiffness[i] = b_vegPrep.densityStiffness[id];
    }
}
