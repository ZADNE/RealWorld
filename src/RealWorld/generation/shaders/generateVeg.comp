/*!
 *  @author     Dubsky Tomas
 */
#version 460
#include <RealWorld/constants/chunk.glsl>
#include <RealWorld/generation/shaders/generateStructure.glsl>
#include <RealWorld/generation/shaders/vegDistribution.glsl>
#include <RealWorld/world/shaders/random.glsl>
const int BranchSB_BINDING = 5;
#include <RealWorld/vegetation/shaders/BranchSBWithAllocation.glsl>
const int VegPreparationSB_BINDING = 6;
#define VegPreparationSB_ACCESS writeonly
#include <RealWorld/generation/shaders/VegPreparationSB.glsl>

layout (local_size_x = 64,
        local_size_y = 1,
        local_size_z = 1
) in;

const int k_invocOffsetTi = iChunkTi.x / int(gl_WorkGroupSize.x);
const int k_randomOffsetTi = k_invocOffsetTi - 1;

int invocXPosTi(){
    int basePosTi = p_chunkTi.x + int(gl_LocalInvocationID.x) * k_invocOffsetTi;
    int randomOffsetTi = int(random()) & k_randomOffsetTi;
    return basePosTi + randomOffsetTi;
}

shared uint s_newBranchCount;
shared int  s_globalFirstBranchIndex;
shared uint s_vegPrepInstCount;
shared uint s_branchPrepInstCount;

void main(){
    // Init shared vars
    if (gl_LocalInvocationID.x == 0){
        s_newBranchCount = 0;
        s_vegPrepInstCount = 0;
        s_branchPrepInstCount = 0;
    }
    barrier();

    g_randomState =
        uint(p_chunkTi.y << 16 | p_chunkTi.x) ^
        uint(gl_LocalInvocationID.x * 2713) ^
        uint(p_seed);
    ivec2 pTi = ivec2(invocXPosTi(), 0);
    float xPx = tiToPx(pTi.x);
    vec2 biomeClimate = biomeClimate(xPx, p_seed);
    Biome biome = biomeStructure(biomeClimate);
    float horizonPx = horizon(xPx, biome, p_seed).r;
    pTi.y = int(pxToTi(horizonPx));

    uint branchLocalOffset;
    uint templateIndex = ~0;

    // Gather vegetation of the chunk
    if (pTi.y >= p_chunkTi.y && pTi.y < (p_chunkTi.y + iChunkTi.y)) {// If on the horizon
        // Select the vegetation to generate
        VegDistr distr = biomeVegDistr(biomeClimate);
        float rndTemplate = randomFloat() * float(gl_WorkGroupSize.x);
        float probMin = 0.0;
        for (int i = 0; i < k_vegTemplates.length(); ++i){
            float probMax = probMin + distr.genProbability[i];
            templateIndex = (rndTemplate > probMin && rndTemplate <= probMax) ? i : templateIndex;
            probMin = probMax;
        }

        // If some vegetation succeeded the test
        if (templateIndex != ~0){
            branchLocalOffset = atomicAdd(s_newBranchCount, k_vegTemplates[templateIndex].branchCount);
        }
    }
    barrier();

    // Allocate space for all vegetation of the chunk
    if (gl_LocalInvocationID.x == 0){
        if (s_newBranchCount > 0){
            s_globalFirstBranchIndex = allocateBranches(
                s_newBranchCount, tiToCh(p_chunkTi), p_worldTexSizeCh);
        } else {
            s_globalFirstBranchIndex = -1; // There is no vegetation in the chunk
        }
    }
    barrier();

    // Prepare vegetation instances
    if (s_globalFirstBranchIndex >= 0){ // If allocation succeeded
        if (templateIndex != ~0){ // If it represents a vegetation
            uint branchPrepInstIndex = atomicAdd(s_branchPrepInstCount, k_vegTemplates[templateIndex].branchCount);
            float greenMass = biomeClimate.x + biomeClimate.y;
            b_vegPrep.vegInstances[atomicAdd(s_vegPrepInstCount, 1)] = VegInstance(
                templateIndex,                                  // templateIndex
                s_globalFirstBranchIndex + branchLocalOffset,   // outputIndex
                random(),                                       // randomSeed
                branchPrepInstIndex,
                pTi,                                            // rootPosTi
                greenMass * 0.25 + 0.75,                        // sizeFactor
                0.5 * randomFloat() + 0.75                      // angleFactor
            );
        }
    }
    barrier();

    if (gl_LocalInvocationIndex == 0){
        b_vegPrep.vegDispatchSize = uvec4(s_vegPrepInstCount, 1, 1, 0);
        b_vegPrep.branchDispatchSize = uvec4(s_branchPrepInstCount, 1, 1, 0);
    }
}
