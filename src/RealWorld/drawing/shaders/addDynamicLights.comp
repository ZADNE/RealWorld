/**
 *  @author     Dubsky Tomas
 */
#version 460
#include <RealWorld/constants/tile.glsl>
#include <RealWorld/constants/light.glsl>
#include <RealWorld/drawing/shaders/AnalysisPC.glsl>
#include <RealWorld/drawing/shaders/calcInputsPll.glsl>
#include <RealWorld/drawing/shaders/DynamicLightsSB.glsl>

layout (local_size_x = 8,
        local_size_y = 2,
        local_size_z = 2
) in;

layout (set = 0, binding = k_lightImageBinding, r32ui)
    uniform restrict uimage2D u_lightImage;

const int k_toUnitBits = k_lightScaleBits + 2;
const vec2 k_toUnitScale = vec2(1.0, 1.0) / k_iLightScale / TilePx;

vec4 lightOfThisUnit(vec4 lightTotal, vec2 lightPosPx, vec2 relUn){
    vec2 posUnFract = fract(lightPosPx * k_toUnitScale + relUn);
    vec2 portion = vec2(1.0) - abs(posUnFract - relUn);
    return lightTotal * portion.x * portion.y;
}

void main(){
    if (gl_GlobalInvocationID.x < p_.lightCount){
        DynamicLight light = b_dynamicLights.lights[gl_GlobalInvocationID.x];
        ivec2 lightPosPx = light.posPx - p_.addLightOffsetPx;
        ivec2 lightPosUn = lightPosPx >> k_toUnitBits;
        ivec2 editPos = lightPosUn + ivec2(gl_LocalInvocationID.yz);
        bvec2 lowerClip = greaterThanEqual(editPos, ivec2(0));
        bvec2 upperClip = lessThan(editPos, imageSize(u_lightImage));
        if (all(bvec4(lowerClip, upperClip))){//If inside the light image
            vec4 dynLightUnit = lightOfThisUnit(
                unpackUnorm4x8(light.col),
                lightPosPx,
                vec2(gl_LocalInvocationID.yz));

            uint last = imageLoad(u_lightImage, editPos).r;
            uint expected;
            do {
                vec4 wantedLight = unpackUnorm4x8(last) + dynLightUnit;
                uint wanted = packUnorm4x8(wantedLight);
                expected = last;
                last = imageAtomicCompSwap(u_lightImage, editPos, expected, wanted);
            } while (last != expected);
        }
    }
}
