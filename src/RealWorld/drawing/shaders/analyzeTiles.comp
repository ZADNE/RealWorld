/**
 *  @author     Dubsky Tomas
 */
#version 460
#include <RealWorld/constants/tile.glsl>
#include <RealWorld/constants/world.glsl>
#include <RealWorld/constants/light.glsl>
#include <RealWorld/generation/external_shaders/snoise.glsl>
#include <RealWorld/drawing/shaders/calcInputsPll.glsl>
#include <RealWorld/drawing/shaders/AnalysisPC.glsl>

layout (local_size_x = k_analysisGroupSize,
        local_size_y = k_analysisGroupSize,
        local_size_z = 1
) in;

layout (set = 0, binding = k_lightImageBinding, r32ui)
    uniform restrict writeonly uimage2D u_lightImage;
layout (set = 0, binding = k_transluImageBinding, r8)
    uniform restrict writeonly image2D  u_transluImage;
layout (set = 0, binding = k_worldSamplerBinding)
    uniform usampler2DArray             u_worldTex;
layout (set = 0, binding = k_blockLightAtlasBinding)
    uniform sampler2D                   u_blockLightAtlas;
layout (set = 0, binding = k_wallLightAtlasBinding)
    uniform sampler2D                   u_wallLightAtlas;

const float TO_UNIT_SCALE = 1.0 / (k_iLightScale * k_iLightScale);

vec4 skyLight(vec2 posTi){
    float noiseLight = max(snoise(posTi * k_iLightScaleInv / 8.0, 13.0) / 320.0, 0.0);
    return vec4(p_.skyLight.rgb, p_.skyLight.a + noiseLight);
}

void main(){
    // Calculate position and init variables
    const ivec2 readBasePosTi = p_.analysisOffsetTi + (ivec2(gl_GlobalInvocationID) << k_lightScaleBits);
    vec4 light = vec4(0.0);// RGB = color of the light, A = intensity of the light
    vec4 translu = vec4(0.0);// R = translucency of the unit

    // Analyze the thread's area
    for (int y = 0; y < k_iLightScale; y++){
        for (int x = 0; x < k_iLightScale; x++){
            // Fetch the tile
            ivec2 posAt = tiToAt(readBasePosTi + ivec2(x, y), p_.worldTexMask);
            uvec2 block = texelFetch(u_worldTex, ivec3(posAt, k_blockLayer), 0).xy & 0xff;
            uvec2 wall = texelFetch(u_worldTex, ivec3(posAt, k_wallLayer), 0).xy   & 0xff;

            // Process its translucency
            bool airBlock = isAirBlock(block.L_T);
            translu.r += airBlock ? (208.0/255.0) : (150.0/255.0);

            // Process it as a light source
            vec4 blockLight = texelFetch(u_blockLightAtlas, ivec2(block.yx), 0);
            vec4 wallLight = isAirWall(wall.L_T) ? skyLight(vec2(posAt)) : texelFetch(u_wallLightAtlas, ivec2(wall.yx), 0);
            vec4 tileLight = airBlock ? wallLight : blockLight;
            light += tileLight;
        }
    }

    // Scale
    light *= TO_UNIT_SCALE;
    imageStore(u_lightImage, ivec2(gl_GlobalInvocationID), uvec4(packUnorm4x8(light)));
    translu.r *= TO_UNIT_SCALE;
    imageStore(u_transluImage, ivec2(gl_GlobalInvocationID), translu);
}
